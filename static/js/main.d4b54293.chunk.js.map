{"version":3,"sources":["hooks/ConfigContext.js","hooks/useSavedConfig.js","hooks/useConfig.js","components/Config.jsx","components/Log/ClearLogButton.jsx","components/Log/LogElement.jsx","components/Log/LogElementList.jsx","components/Log/Log.jsx","components/RandomNumber.jsx","components/Dices.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ConfigContext","createContext","DEFAULT_CONFIG","min","max","diceCount","logEnabled","log","useSavedConfig","config","saved","JSON","parse","localStorage","getItem","e","c","setItem","stringify","useConfig","property","useContext","context","setContext","saveConfig","Error","value","newContext","Config","setMin","setMax","count","setCount","setLogEnabled","useState","modalIsOpen","setModalIsOpen","validateIntVal","Math","round","Number","replaceAll","substr","className","icon","faCog","onClick","ariaHideApp","overlayClassName","isOpen","onRequestClose","faTimesCircle","inputMode","onChange","target","type","checked","ClearLogButton","setLog","LogElement","props","LogElementList","ref","useRef","current","scrollTop","map","i","Log","length","RandomNumber","setNumber","isAnimated","setIsAnimated","ceil","floor","random","getRandomInDiapason","addToLog","setTimeout","faDiceD6","faDiceOne","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","prepareValue","Dices","dices","push","document","querySelector","style","setProperty","querySelectorAll","forEach","click","App","savedConfig","configContext","setConfigContext","Provider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d4b54293.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport const ConfigContext = createContext([])\n","const DEFAULT_CONFIG = {\n  min: 1,\n  max: 6,\n  diceCount: 1,\n  logEnabled: false,\n  log: [],\n}\n\nexport function useSavedConfig () {\n  let config\n  try {\n    let saved = JSON.parse(localStorage.getItem('config'))\n    config = { ...DEFAULT_CONFIG, ...(saved ?? []) }\n  }\n  catch (e) {\n    config = DEFAULT_CONFIG\n  }\n  const saveConfig = c => localStorage.setItem('config', JSON.stringify(c))\n  return [config, saveConfig]\n}","import { ConfigContext } from './ConfigContext'\nimport { useContext } from 'react'\nimport { useSavedConfig } from './useSavedConfig'\n\nexport function useConfig (property) {\n  const [context, setContext] = useContext(ConfigContext)\n  const [, saveConfig] = useSavedConfig()\n  if (!context) {\n    throw Error('useConfig hook must be used inside ConfigContext.Provider')\n  }\n  const propertyValue = context[property]\n  const setProperty = (value) => {\n    let newContext = { ...context, [property]: value }\n    setContext(newContext)\n    saveConfig(newContext)\n  }\n  return [propertyValue, setProperty]\n}","import { useConfig } from '../hooks/useConfig'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport Modal from 'react-modal'\nimport { useState } from 'react'\n\nexport function Config () {\n  const [min, setMin] = useConfig('min')\n  const [max, setMax] = useConfig('max')\n  const [count, setCount] = useConfig('diceCount')\n  const [logEnabled, setLogEnabled] = useConfig('logEnabled')\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n\n  function validateIntVal (value) {\n    return Math.round(Number(value.replaceAll(/[^\\d]/g, '').substr(0, 3)))\n  }\n\n  return (\n    <div>\n      <FontAwesomeIcon className={'settings-button'}\n                       icon={faCog}\n                       onClick={() => setModalIsOpen(true)}/>\n      <Modal\n        ariaHideApp={false}\n        className=\"settings-button__modal\"\n        overlayClassName=\"settings-button__overlay\"\n        isOpen={modalIsOpen}\n        onRequestClose={() => setModalIsOpen(false)}>\n        <div className={'config'}>\n          <FontAwesomeIcon icon={faTimesCircle}\n                           className={'settings-button__modal__close'}\n                           onClick={() => setModalIsOpen(false)}/>\n          <div className={'config__properties'}>\n            <label>От\n              <input value={min} inputMode={'numeric'}\n                     onChange={e => setMin(validateIntVal(e.target.value))}/>\n            </label>\n            <label>До\n              <input value={max} inputMode={'numeric'}\n                     onChange={e => setMax(validateIntVal(e.target.value))}/>\n            </label>\n            <br/>\n            <label>Количество\n              <input value={count} inputMode={'numeric'}\n                     onChange={e => setCount(validateIntVal(e.target.value))}/>\n            </label>\n            <br/>\n            <label>Лог\n              <input type={'checkbox'} checked={logEnabled}\n                     onChange={() => setLogEnabled(!logEnabled)}/>\n            </label>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  )\n}","import { useConfig } from '../../hooks/useConfig'\n\nexport function ClearLogButton () {\n  const [, setLog] = useConfig('log')\n  return (\n    <div className={'clear-log-button'}\n         onClick={() => setLog([])}>Очистить</div>\n  )\n}","export function LogElement (props) {\n  return (\n    <div className={'log-element'}>\n      <div className={'log-element__value'}>\n        {props.value}\n        <sub className={'log-element__value__sub'}>{props.min + '-' + props.max}</sub>\n      </div>\n    </div>\n  )\n}","import { LogElement } from './LogElement'\nimport { useRef } from 'react'\n\nexport function LogElementList (props) {\n  const ref = useRef(null)\n  if (ref.current) {\n    ref.current.scrollTop = 0\n  }\n  return (\n    <div className={'log-element-list'} ref={ref}>\n      {props.log.map(\n        (e, i) => <LogElement\n          key={i}\n          value={e.value}\n          min={e.min}\n          max={e.max}/>)}\n    </div>\n  )\n}","import { useConfig } from '../../hooks/useConfig'\nimport { ClearLogButton } from './ClearLogButton'\nimport { LogElementList } from './LogElementList'\n\nexport function Log () {\n  const [log] = useConfig('log')\n  const [logEnabled] = useConfig('logEnabled')\n  return (logEnabled ? <div className={'log'}>\n      <LogElementList log={log}/>\n      {log.length > 0 ? <ClearLogButton/> : ''}\n    </div> : <></>\n  )\n}","import React, { useState } from 'react'\nimport { useConfig } from '../hooks/useConfig'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faDiceD6,\n  faDiceOne,\n  faDiceTwo,\n  faDiceThree,\n  faDiceFour,\n  faDiceFive,\n  faDiceSix,\n} from '@fortawesome/free-solid-svg-icons'\n\nexport function RandomNumber () {\n  const [value, setNumber] = useState('...')\n  const [isAnimated, setIsAnimated] = useState(false)\n  const [logEnabled] = useState('logEnabled')\n  const [min] = useConfig('min')\n  const [max] = useConfig('max')\n  const [log, setLog] = useConfig('log')\n  const addToLog = (value, min, max) => {\n    setLog([{ value: value, min: min, max: max }, ...log])\n  }\n\n  function generateNewNumber () {\n    setIsAnimated(true)\n    let value = getRandomInDiapason(min, max)\n    setNumber(value)\n    if (logEnabled) {\n      addToLog(value, min, max)\n    }\n    setTimeout(() => setIsAnimated(false), 400)\n  }\n\n  function getRandomInDiapason (min, max) {\n    if (min > max) {\n      [min, max] = [max, min]\n    }\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  function prepareValue (value) {\n    if (min <= 6 && min >= 1 && max <= 6 && max >= 1) {\n      let icon = faDiceD6\n      switch (value) {\n        case 1:\n          icon = faDiceOne\n          break\n        case 2:\n          icon = faDiceTwo\n          break\n        case 3:\n          icon = faDiceThree\n          break\n        case 4:\n          icon = faDiceFour\n          break\n        case 5:\n          icon = faDiceFive\n          break\n        case 6:\n          icon = faDiceSix\n          break\n      }\n      return <FontAwesomeIcon className={'dice-value result-value'}\n                              icon={icon}/>\n    }\n    else {\n      return <div className={'random-number result-value'}>{value}</div>\n    }\n  }\n\n  return (\n    <div\n      className={isAnimated ? 'rotation-animation dice' : 'dice'}\n      onClick={generateNewNumber}>\n      {prepareValue(value)}\n    </div>\n  )\n}","import { useConfig } from '../hooks/useConfig'\nimport { RandomNumber } from './RandomNumber'\n\nexport function Dices () {\n  const [count] = useConfig('diceCount')\n  let dices = []\n  for (let i = 1; i <= count; i++) {\n    dices.push(<RandomNumber key={i}/>)\n  }\n\n  document.querySelector(':root').style.setProperty('--dice-count', count)\n\n  function clickAll () {\n    document.querySelectorAll(\n      '.dice').\n      forEach(e => e.click())\n  }\n\n  return (\n    <div>\n      {dices.length > 1 ?\n        <div className={'click-all-button'} onClick={clickAll}>Бросить все\n          кубики ({count})</div> : ''}\n      <div className={'dice-container'}>{dices}</div>\n    </div>\n  )\n}","import './App.css'\nimport React, { useState } from 'react'\nimport { Config } from './components/Config'\nimport { ConfigContext } from './hooks/ConfigContext'\nimport { useSavedConfig } from './hooks/useSavedConfig'\nimport { Log } from './components/Log/Log'\nimport { Dices } from './components/Dices'\n\nexport default function App () {\n  const [savedConfig] = useSavedConfig()\n  const [configContext, setConfigContext] = useState(savedConfig)\n  return (\n    <div className={'app'}>\n      <ConfigContext.Provider value={[configContext, setConfigContext]}>\n        <Config/>\n        <div className={'container'}>\n          <Dices/>\n        </div>\n        <div className={'container'}>\n          <Log/>\n        </div>\n      </ConfigContext.Provider>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}