{"version":3,"sources":["hooks/ConfigContext.js","hooks/useSavedConfig.js","hooks/useConfig.js","components/RandomNumber.jsx","components/Config.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ConfigContext","createContext","DEFAULT_CONFIG","min","max","useSavedConfig","config","saved","JSON","parse","localStorage","getItem","e","c","setItem","stringify","useConfig","property","useContext","context","setContext","saveConfig","Error","value","newContext","RandomNumber","useState","setNumber","isAnimated","setIsAnimated","className","onClick","Math","ceil","floor","random","getRandomInDiapason","setTimeout","Config","setMin","setMax","validateIntVal","round","Number","replaceAll","substr","onChange","target","App","savedConfig","configContext","setConfigContext","Provider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3cd67130.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport const ConfigContext = createContext([])\n","const DEFAULT_CONFIG = {\n  min: 1,\n  max: 6,\n}\n\nexport function useSavedConfig () {\n  let config\n  try {\n    let saved = JSON.parse(localStorage.getItem('config'))\n    config = { ...DEFAULT_CONFIG, ...(saved ?? []) }\n  }\n  catch (e) {\n    config = DEFAULT_CONFIG\n  }\n  const saveConfig = c => localStorage.setItem('config', JSON.stringify(c))\n  return [config, saveConfig]\n}","import { ConfigContext } from './ConfigContext'\nimport { useContext } from 'react'\nimport { useSavedConfig } from './useSavedConfig'\n\nexport function useConfig (property) {\n  const [context, setContext] = useContext(ConfigContext)\n  const [, saveConfig] = useSavedConfig()\n  if (!context) {\n    throw Error('useConfig hook must be used inside ConfigContext.Provider')\n  }\n  const propertyValue = context[property]\n  const setProperty = (value) => {\n    let newContext = { ...context, [property]: value }\n    setContext(newContext)\n    saveConfig(newContext)\n  }\n  return [propertyValue, setProperty]\n}","import React, { useState } from 'react'\nimport { useConfig } from '../hooks/useConfig'\n\nexport function RandomNumber () {\n  const [value, setNumber] = useState('...')\n  const [isAnimated, setIsAnimated] = useState(false)\n  const [min] = useConfig('min')\n  const [max] = useConfig('max')\n\n  function generateNewNumber () {\n    setIsAnimated(true)\n    setNumber(getRandomInDiapason(min, max))\n    setTimeout(() => setIsAnimated(false), 400)\n  }\n\n  function getRandomInDiapason (min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max + 1)\n    return Math.floor(Math.random() * (max - min)) + min\n  }\n\n  return (\n    <div\n      className={(isAnimated ? 'rotation-animation ' : ' ') + 'random-number'}\n      onClick={generateNewNumber}>\n      {value}\n    </div>\n  )\n}","import { useConfig } from '../hooks/useConfig'\n\nexport function Config () {\n  const [min, setMin] = useConfig('min')\n  const [max, setMax] = useConfig('max')\n\n  function validateIntVal (value) {\n    return Math.round(Number(value.replaceAll(/[^\\d]/g, '').substr(0, 3)))\n  }\n\n  return (\n    <div className={'config'}>\n      <label>От\n        <input value={min}\n               onChange={e => setMin(validateIntVal(e.target.value))}/>\n      </label>\n      <label>До\n        <input value={max}\n               onChange={e => setMax(validateIntVal(e.target.value))}/>\n      </label>\n    </div>\n  )\n}","import './App.css'\nimport React, { useState } from 'react'\nimport { RandomNumber } from './components/RandomNumber'\nimport { Config } from './components/Config'\nimport { ConfigContext } from './hooks/ConfigContext'\nimport { useSavedConfig } from './hooks/useSavedConfig'\n\nexport default function App () {\n  const [savedConfig] = useSavedConfig()\n  const [configContext, setConfigContext] = useState(savedConfig)\n  return (\n    <div className={'app'}>\n      <ConfigContext.Provider value={[configContext, setConfigContext]}>\n        <Config/>\n        <div className={'counters-container'}>\n          <RandomNumber/>\n        </div>\n      </ConfigContext.Provider>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}