{"version":3,"sources":["hooks/ConfigContext.js","hooks/useSavedConfig.js","hooks/useConfig.js","components/RandomNumber.jsx","components/Config.jsx","components/Log/ClearLogButton.jsx","components/Log/LogElement.jsx","components/Log/LogElementList.jsx","components/Log/Log.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ConfigContext","createContext","DEFAULT_CONFIG","min","max","log","useSavedConfig","config","saved","JSON","parse","localStorage","getItem","e","c","setItem","stringify","useConfig","property","useContext","context","setContext","saveConfig","Error","value","newContext","RandomNumber","useState","setNumber","isAnimated","setIsAnimated","setLog","className","onClick","Math","ceil","floor","random","getRandomInDiapason","addToLog","setTimeout","icon","faDiceD6","faDiceOne","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","prepareValue","Config","setMin","setMax","modalIsOpen","setModalIsOpen","validateIntVal","round","Number","replaceAll","substr","faCog","overlayClassName","isOpen","onRequestClose","faTimesCircle","inputMode","onChange","target","ClearLogButton","LogElement","props","LogElementList","ref","useRef","current","scrollTop","map","i","Log","length","App","savedConfig","configContext","setConfigContext","Provider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6PAEaA,EAAgBC,wBAAc,ICFrCC,EAAiB,CACrBC,IAAK,EACLC,IAAK,EACLC,IAAK,IAGA,SAASC,IACd,IAAIC,EACJ,IACE,IAAIC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,WAC5CL,EAAM,2BAAQL,GAAR,OAA4BM,QAA5B,IAA4BA,IAAS,IAE7C,MAAOK,GACLN,EAASL,EAGX,MAAO,CAACK,EADW,SAAAO,GAAC,OAAIH,aAAaI,QAAQ,SAAUN,KAAKO,UAAUF,MCXjE,SAASG,EAAWC,GAAW,IAAD,EACLC,qBAAWnB,GADN,mBAC5BoB,EAD4B,KACnBC,EADmB,OAEZf,IAAdgB,EAF0B,oBAGnC,IAAKF,EACH,MAAMG,MAAM,6DAQd,MAAO,CANeH,EAAQF,GACV,SAACM,GACnB,IAAIC,EAAU,2BAAQL,GAAR,kBAAkBF,EAAWM,IAC3CH,EAAWI,GACXH,EAAWG,K,yBCDR,SAASC,IAAiB,IAAD,EACHC,mBAAS,OADN,mBACvBH,EADuB,KAChBI,EADgB,OAEMD,oBAAS,GAFf,mBAEvBE,EAFuB,KAEXC,EAFW,OAGhBb,EAAU,OAAjBd,EAHuB,sBAIhBc,EAAU,OAAjBb,EAJuB,sBAKRa,EAAU,OALF,mBAKvBZ,EALuB,KAKlB0B,EALkB,KAsD9B,OACE,qBACEC,UAAWH,EAAa,sBAAwB,IAChDI,QA/CJ,WACEH,GAAc,GACd,IAAIN,EAMN,SAA8BrB,EAAKC,GAGjC,OAFAD,EAAM+B,KAAKC,KAAKhC,GAChBC,EAAM8B,KAAKE,MAAMhC,EAAM,GAChB8B,KAAKE,MAAMF,KAAKG,UAAYjC,EAAMD,IAAQA,EATrCmC,CAAoBnC,EAAKC,GACrCwB,EAAUJ,GAPK,SAACA,EAAOrB,EAAKC,GAC5B2B,EAAO,CAAC,CAAEP,MAAOA,EAAOrB,IAAKA,EAAKC,IAAKA,IAAjC,mBAA2CC,KAOjDkC,CAASf,EAAOrB,EAAKC,GACrBoC,YAAW,kBAAMV,GAAc,KAAQ,MAwCvC,SA/BF,SAAuBN,GACrB,GAAIrB,GAAO,GAAKA,GAAO,GAAKC,GAAO,GAAKA,GAAO,EAAG,CAChD,IAAIqC,EAAOC,IACX,OAAQlB,GACN,KAAK,EACHiB,EAAOE,IACP,MACF,KAAK,EACHF,EAAOG,IACP,MACF,KAAK,EACHH,EAAOI,IACP,MACF,KAAK,EACHJ,EAAOK,IACP,MACF,KAAK,EACHL,EAAOM,IACP,MACF,KAAK,EACHN,EAAOO,IAGX,OAAO,cAAC,IAAD,CAAiBhB,UAAW,0BAA2BS,KAAMA,IAGpE,OAAO,qBAAKT,UAAW,6BAAhB,SAA+CR,IAQrDyB,CAAazB,K,qBCjEb,SAAS0B,IAAW,IAAD,EACFjC,EAAU,OADR,mBACjBd,EADiB,KACZgD,EADY,OAEFlC,EAAU,OAFR,mBAEjBb,EAFiB,KAEZgD,EAFY,OAGczB,oBAAS,GAHvB,mBAGjB0B,EAHiB,KAGJC,EAHI,KAKxB,SAASC,EAAgB/B,GACvB,OAAOU,KAAKsB,MAAMC,OAAOjC,EAAMkC,WAAW,SAAU,IAAIC,OAAO,EAAG,KAGpE,OACE,gCACE,cAAC,IAAD,CAAiB3B,UAAW,kBACXS,KAAMmB,IACN3B,QAAS,kBAAMqB,GAAe,MAC/C,cAAC,IAAD,CACEtB,UAAU,yBACV6B,iBAAiB,2BACjBC,OAAQT,EACRU,eAAgB,kBAAMT,GAAe,IAJvC,SAKE,sBAAKtB,UAAW,SAAhB,UACE,cAAC,IAAD,CAAiBS,KAAMuB,IACNhC,UAAW,gCACXC,QAAS,kBAAMqB,GAAe,MAC/C,sBAAKtB,UAAW,qBAAhB,UACE,iDACE,uBAAOR,MAAOrB,EAAK8D,UAAW,UACvBC,SAAU,SAAArD,GAAC,OAAIsC,EAAOI,EAAe1C,EAAEsD,OAAO3C,cAEvD,iDACE,uBAAOA,MAAOpB,EAAK6D,UAAW,UACvBC,SAAU,SAAArD,GAAC,OAAIuC,EAAOG,EAAe1C,EAAEsD,OAAO3C,yBClC5D,SAAS4C,IAAmB,IAAD,EACbnD,EAAU,OAApBc,EADuB,oBAEhC,OACE,qBAAKC,UAAW,mBACXC,QAAS,kBAAMF,EAAO,KAD3B,8DCLG,SAASsC,EAAYC,GAC1B,OACE,qBAAKtC,UAAW,cAAhB,SACE,sBAAKA,UAAW,qBAAhB,UACGsC,EAAM9C,MACP,qBAAKQ,UAAW,0BAAhB,SAA4CsC,EAAMnE,IAAM,IAAMmE,EAAMlE,WCFrE,SAASmE,EAAgBD,GAC9B,IAAME,EAAMC,iBAAO,MAInB,OAHID,EAAIE,UACNF,EAAIE,QAAQC,UAAY,GAGxB,qBAAK3C,UAAW,mBAAoBwC,IAAKA,EAAzC,SACGF,EAAMjE,IAAIuE,KACT,SAAC/D,EAAGgE,GAAJ,OAAU,cAACR,EAAD,CAER7C,MAAOX,EAAEW,MACTrB,IAAKU,EAAEV,IACPC,IAAKS,EAAET,KAHFyE,QCRR,SAASC,IAAQ,IAAD,EACP7D,EAAU,OAAjBZ,EADc,oBAErB,OACE,sBAAK2B,UAAW,MAAhB,UACE,cAACuC,EAAD,CAAgBlE,IAAKA,IACpBA,EAAI0E,OAAS,EAAI,cAACX,EAAD,IAAoB,MCD7B,SAASY,IAAQ,IAAD,EACP1E,IAAf2E,EADsB,sBAEatD,mBAASsD,GAFtB,mBAEtBC,EAFsB,KAEPC,EAFO,KAG7B,OACE,qBAAKnD,UAAW,MAAhB,SACE,eAAChC,EAAcoF,SAAf,CAAwB5D,MAAO,CAAC0D,EAAeC,GAA/C,UACE,cAACjC,EAAD,IACA,qBAAKlB,UAAW,YAAhB,SACE,cAACN,EAAD,MAEF,qBAAKM,UAAW,YAAhB,SACE,cAAC8C,EAAD,WCPV,IAAMO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOrF,GAC9BsF,UAAUC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQnG,IACN,+GAKEE,GAAUA,EAAOkG,UACnBlG,EAAOkG,SAASR,KAMlBO,QAAQnG,IAAI,sCAGRE,GAAUA,EAAOmG,WACnBnG,EAAOmG,UAAUT,WAO5BU,OAAM,SAACC,GACNJ,QAAQI,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkBlH,GACvB,GAA6C,kBAAmBsF,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,mBAAwBpC,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAM+B,mBAAN,sBAEPtC,IAgEV,SAAiCO,EAAOrF,GAEtCwH,MAAMnC,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5BhC,MAAK,SAACiC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMtC,MAAK,SAACC,GAClCA,EAAasC,aAAavC,MAAK,WAC7BT,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOrF,MAG1BoG,OAAM,WACLH,QAAQnG,IAAI,oEAtFVoI,CAAwB7C,EAAOrF,GAI/BsF,UAAUC,cAAcwC,MAAMtC,MAAK,WACjCQ,QAAQnG,IACN,+GAMJsF,EAAgBC,EAAOrF,OElC/BmI,GACA7B,M","file":"static/js/main.4d926b76.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport const ConfigContext = createContext([])\n","const DEFAULT_CONFIG = {\n  min: 1,\n  max: 6,\n  log: [],\n}\n\nexport function useSavedConfig () {\n  let config\n  try {\n    let saved = JSON.parse(localStorage.getItem('config'))\n    config = { ...DEFAULT_CONFIG, ...(saved ?? []) }\n  }\n  catch (e) {\n    config = DEFAULT_CONFIG\n  }\n  const saveConfig = c => localStorage.setItem('config', JSON.stringify(c))\n  return [config, saveConfig]\n}","import { ConfigContext } from './ConfigContext'\nimport { useContext } from 'react'\nimport { useSavedConfig } from './useSavedConfig'\n\nexport function useConfig (property) {\n  const [context, setContext] = useContext(ConfigContext)\n  const [, saveConfig] = useSavedConfig()\n  if (!context) {\n    throw Error('useConfig hook must be used inside ConfigContext.Provider')\n  }\n  const propertyValue = context[property]\n  const setProperty = (value) => {\n    let newContext = { ...context, [property]: value }\n    setContext(newContext)\n    saveConfig(newContext)\n  }\n  return [propertyValue, setProperty]\n}","import React, { useState } from 'react'\nimport { useConfig } from '../hooks/useConfig'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faDiceD6,\n  faDiceOne,\n  faDiceTwo,\n  faDiceThree,\n  faDiceFour,\n  faDiceFive,\n  faDiceSix,\n} from '@fortawesome/free-solid-svg-icons'\n\nexport function RandomNumber () {\n  const [value, setNumber] = useState('...')\n  const [isAnimated, setIsAnimated] = useState(false)\n  const [min] = useConfig('min')\n  const [max] = useConfig('max')\n  const [log, setLog] = useConfig('log')\n  const addToLog = (value, min, max) => {\n    setLog([{ value: value, min: min, max: max }, ...log])\n  }\n\n  function generateNewNumber () {\n    setIsAnimated(true)\n    let value = getRandomInDiapason(min, max)\n    setNumber(value)\n    addToLog(value, min, max)\n    setTimeout(() => setIsAnimated(false), 400)\n  }\n\n  function getRandomInDiapason (min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max + 1)\n    return Math.floor(Math.random() * (max - min)) + min\n  }\n\n  function prepareValue (value) {\n    if (min <= 6 && min >= 1 && max <= 6 && max >= 1) {\n      let icon = faDiceD6\n      switch (value) {\n        case 1:\n          icon = faDiceOne\n          break\n        case 2:\n          icon = faDiceTwo\n          break\n        case 3:\n          icon = faDiceThree\n          break\n        case 4:\n          icon = faDiceFour\n          break\n        case 5:\n          icon = faDiceFive\n          break\n        case 6:\n          icon = faDiceSix\n          break\n      }\n      return <FontAwesomeIcon className={'dice-value result-value'} icon={icon}/>\n    }\n    else {\n      return <div className={'random-number result-value'}>{value}</div>\n    }\n  }\n\n  return (\n    <div\n      className={isAnimated ? 'rotation-animation ' : ' '}\n      onClick={generateNewNumber}>\n      {prepareValue(value)}\n    </div>\n  )\n}","import { useConfig } from '../hooks/useConfig'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog, faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport Modal from 'react-modal'\nimport { useState } from 'react'\n\nexport function Config () {\n  const [min, setMin] = useConfig('min')\n  const [max, setMax] = useConfig('max')\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n\n  function validateIntVal (value) {\n    return Math.round(Number(value.replaceAll(/[^\\d]/g, '').substr(0, 3)))\n  }\n\n  return (\n    <div>\n      <FontAwesomeIcon className={'settings-button'}\n                       icon={faCog}\n                       onClick={() => setModalIsOpen(true)}/>\n      <Modal\n        className=\"settings-button__modal\"\n        overlayClassName=\"settings-button__overlay\"\n        isOpen={modalIsOpen}\n        onRequestClose={() => setModalIsOpen(false)}>\n        <div className={'config'}>\n          <FontAwesomeIcon icon={faTimesCircle}\n                           className={'settings-button__modal__close'}\n                           onClick={() => setModalIsOpen(false)}/>\n          <div className={'config__properties'}>\n            <label>От\n              <input value={min} inputMode={'numeric'}\n                     onChange={e => setMin(validateIntVal(e.target.value))}/>\n            </label>\n            <label>До\n              <input value={max} inputMode={'numeric'}\n                     onChange={e => setMax(validateIntVal(e.target.value))}/>\n            </label>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  )\n}","import { useConfig } from '../../hooks/useConfig'\n\nexport function ClearLogButton () {\n  const [, setLog] = useConfig('log')\n  return (\n    <div className={'clear-log-button'}\n         onClick={() => setLog([])}>Очистить</div>\n  )\n}","export function LogElement (props) {\n  return (\n    <div className={'log-element'}>\n      <div className={'log-element__value'}>\n        {props.value}\n        <sub className={'log-element__value__sub'}>{props.min + '-' + props.max}</sub>\n      </div>\n    </div>\n  )\n}","import { LogElement } from './LogElement'\nimport { useRef } from 'react'\n\nexport function LogElementList (props) {\n  const ref = useRef(null)\n  if (ref.current) {\n    ref.current.scrollTop = 0\n  }\n  return (\n    <div className={'log-element-list'} ref={ref}>\n      {props.log.map(\n        (e, i) => <LogElement\n          key={i}\n          value={e.value}\n          min={e.min}\n          max={e.max}/>)}\n    </div>\n  )\n}","import { useConfig } from '../../hooks/useConfig'\nimport { ClearLogButton } from './ClearLogButton'\nimport { LogElementList } from './LogElementList'\n\nexport function Log () {\n  const [log] = useConfig('log')\n  return (\n    <div className={'log'}>\n      <LogElementList log={log}/>\n      {log.length > 0 ? <ClearLogButton/> : ''}\n    </div>\n  )\n}","import './App.css'\nimport React, { useState } from 'react'\nimport { RandomNumber } from './components/RandomNumber'\nimport { Config } from './components/Config'\nimport { ConfigContext } from './hooks/ConfigContext'\nimport { useSavedConfig } from './hooks/useSavedConfig'\nimport { Log } from './components/Log/Log'\n\nexport default function App () {\n  const [savedConfig] = useSavedConfig()\n  const [configContext, setConfigContext] = useState(savedConfig)\n  return (\n    <div className={'app'}>\n      <ConfigContext.Provider value={[configContext, setConfigContext]}>\n        <Config/>\n        <div className={'container'}>\n          <RandomNumber/>\n        </div>\n        <div className={'container'}>\n          <Log/>\n        </div>\n      </ConfigContext.Provider>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}